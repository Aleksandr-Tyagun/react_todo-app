{"version":3,"sources":["components/TodosFilters/TodosFilter.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/TodoApp/TodoApp.js","App.js","index.js"],"names":["TodosFilter","state","activeFilter","handleFilterChange","appliedFilter","filterTodoList","props","setState","this","todoList","handleClearCompleted","activeTodoCount","filter","completed","length","className","href","classNames","selected","onClick","type","Component","TodoItem","isEditing","newTitle","handleEditing","e","target","value","handleEditingKeyDown","id","setNewTitle","key","trim","title","handleCompleteToggle","handleDeleteTodo","editing","onChange","checked","htmlFor","onDoubleClick","onKeyDown","TodoList","toggleAll","setToggle","newState","handleToggleAll","setAll","map","TodoApp","newTodo","todoId","todo","handleNewTodoChange","handleNewTodoEnter","addNewTodo","uuidv4","filterName","val","previousSessionData","JSON","parse","localStorage","getItem","setItem","stringify","activeTodoList","completedTodoList","filteredTodoList","forEach","push","onBlur","onKeyUp","placeholder","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e969c34f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nclass TodosFilter extends Component {\n  state = {\n    activeFilter: 'all',\n  }\n\n  handleFilterChange = (appliedFilter) => {\n    const { filterTodoList } = this.props;\n\n    this.setState({\n      activeFilter: appliedFilter,\n    }, () => filterTodoList(appliedFilter));\n  }\n\n  render() {\n    const {\n      todoList,\n      handleClearCompleted,\n    } = this.props;\n\n    const { activeFilter } = this.state;\n\n    const activeTodoCount = (todoList\n      .filter(({ completed }) => !completed) || []\n    ).length;\n\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {activeTodoCount}\n          {' '}\n          items left\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              className={classNames({ selected: activeFilter === 'all' })}\n              onClick={() => this.handleFilterChange('all')}\n            >\n              All\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/active\"\n              className={classNames({ selected: activeFilter === 'active' })}\n              onClick={() => this.handleFilterChange('active')}\n            >\n              Active\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/completed\"\n              className={classNames({ selected: activeFilter === 'completed' })}\n              onClick={() => this.handleFilterChange('completed')}\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n\n        {todoList.length - activeTodoCount > 0 && (\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={handleClearCompleted}\n          >\n            Clear completed\n          </button>\n        )}\n      </footer>\n    );\n  }\n}\n\nTodosFilter.propTypes = {\n  filterTodoList: PropTypes.func.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n  todoList: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n};\n\nexport default TodosFilter;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nclass TodoItem extends Component {\n  state = {\n    isEditing: false,\n    newTitle: '',\n  }\n\n  handleEditing = (e) => {\n    this.setState({\n      newTitle: e.target.value,\n    });\n  }\n\n  handleEditingKeyDown = (e) => {\n    const {\n      id,\n      setNewTitle,\n    } = this.props;\n\n    const newTitle = e.target.value;\n\n    if (e.key === 'Enter') {\n      if (newTitle.trim().length === 0) {\n        this.setState({ isEditing: false });\n\n        return;\n      }\n\n      setNewTitle(id, newTitle);\n      this.setState({ isEditing: false });\n    }\n\n    if (e.key === 'Escape') {\n      this.setState({ isEditing: false });\n    }\n  }\n\n  render() {\n    const {\n      id,\n      title,\n      completed,\n      handleCompleteToggle,\n      handleDeleteTodo,\n    } = this.props;\n\n    const {\n      isEditing,\n      newTitle,\n    } = this.state;\n\n    return (\n      <li className={\n        classNames({\n          completed,\n          editing: isEditing,\n        })\n      }\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            onChange={() => handleCompleteToggle(id)}\n            checked={completed}\n          />\n          <label\n            htmlFor={`todo-${id}`}\n            onDoubleClick={() => this.setState({\n              isEditing: true,\n              newTitle: title,\n            })}\n          >\n            {title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => handleDeleteTodo(id)}\n          />\n        </div>\n        <input\n          type=\"text\"\n          className=\"edit\"\n          value={newTitle}\n          onChange={this.handleEditing}\n          onKeyDown={this.handleEditingKeyDown}\n        />\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  setNewTitle: PropTypes.func.isRequired,\n  handleCompleteToggle: PropTypes.func.isRequired,\n  handleDeleteTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from '../TodoItem/TodoItem';\n\nclass TodoList extends Component {\n  state = {\n    toggleAll: false,\n  }\n\n  componentDidUpdate() {\n    const { todoList } = this.props;\n    const { toggleAll } = this.state;\n\n    const activeTodoCount = (todoList\n      .filter(({ completed }) => !completed) || []\n    ).length;\n\n    if (activeTodoCount === 0 && !toggleAll) {\n      this.setToggle(true);\n    }\n\n    if (activeTodoCount !== 0 && toggleAll) {\n      this.setToggle(false);\n    }\n  }\n\n  setToggle = (newState) => {\n    this.setState({ toggleAll: newState });\n  }\n\n  handleToggleAll = () => {\n    const { toggleAll } = this.state;\n    const {\n      setAll,\n    } = this.props;\n\n    this.setState(state => ({\n      toggleAll: !state.toggleAll,\n    }), () => {\n      if (!toggleAll) {\n        setAll(true);\n      } else {\n        setAll(false);\n      }\n    });\n  }\n\n  render() {\n    const {\n      todoList,\n      handleCompleteToggle,\n      handleDeleteTodo,\n      setNewTitle,\n    } = this.props;\n\n    const { toggleAll } = this.state;\n\n    return (\n      <section className=\"main\">\n        {todoList.length !== 0 && (\n          <>\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={toggleAll}\n              onChange={this.handleToggleAll}\n            />\n            <label htmlFor=\"toggle-all\">\n              Mark all as complete\n            </label>\n          </>\n        )}\n\n        <ul className=\"todo-list\">\n          {todoList.map(({ id, title, completed }) => (\n            <TodoItem\n              key={id}\n              id={id}\n              title={title}\n              completed={completed}\n              handleCompleteToggle={handleCompleteToggle}\n              handleDeleteTodo={handleDeleteTodo}\n              setNewTitle={setNewTitle}\n            />\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todoList: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  handleCompleteToggle: PropTypes.func.isRequired,\n  setAll: PropTypes.func.isRequired,\n  handleDeleteTodo: PropTypes.func.isRequired,\n  setNewTitle: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport TodosFilter from '../TodosFilters/TodosFilter';\nimport TodoList from '../TodoList/TodoList';\n\nclass TodoApp extends Component {\n  state = {\n    newTodo: '',\n    activeFilter: 'all',\n    todoList: [],\n  }\n\n  componentDidMount() {\n    const previousSessionData = JSON.parse(localStorage.getItem('todoList'));\n\n    if (previousSessionData) {\n      this.setState({ todoList: previousSessionData });\n    }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('todoList', JSON.stringify(this.state.todoList));\n  }\n\n  handleCompleteToggle = (todoId) => {\n    this.setState(state => ({\n      todoList: state.todoList.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  handleDeleteTodo = (todoId) => {\n    this.setState(state => ({\n      todoList: state.todoList.filter(todo => todo.id !== todoId),\n    }));\n  }\n\n  handleNewTodoChange = (e) => {\n    this.setState({\n      newTodo: e.target.value,\n    });\n  }\n\n  handleClearCompleted = () => {\n    this.setState(state => ({\n      todoList: state.todoList.filter(({ completed }) => !completed),\n    }));\n  }\n\n  handleNewTodoEnter = (e) => {\n    if (e.key === 'Enter') {\n      this.addNewTodo();\n    }\n  }\n\n  setNewTitle = (id, newTitle) => {\n    this.setState(state => ({\n      todoList: state.todoList.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            title: newTitle,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  addNewTodo = () => {\n    if (this.state.newTodo) {\n      this.setState(state => ({\n        todoList: [\n          ...state.todoList,\n          {\n            id: uuidv4(),\n            title: state.newTodo,\n            completed: false,\n          },\n        ],\n        newTodo: '',\n      }));\n    }\n  }\n\n  filterTodoList = (filterName) => {\n    if (filterName === 'completed') {\n      this.setState({ activeFilter: 'completed' });\n    }\n\n    if (filterName === 'active') {\n      this.setState({ activeFilter: 'active' });\n    }\n\n    if (filterName === 'all') {\n      this.setState({ activeFilter: 'all' });\n    }\n  }\n\n  setAll = (val) => {\n    this.setState(state => ({\n      todoList: state.todoList.map(todo => ({\n        ...todo,\n        completed: val,\n      })),\n    }));\n  }\n\n  render() {\n    const {\n      todoList,\n      newTodo,\n      activeFilter,\n    } = this.state;\n\n    const activeTodoList = [];\n    const completedTodoList = [];\n    let filteredTodoList = [];\n\n    todoList.forEach((todo) => {\n      if (todo.completed) {\n        completedTodoList.push(todo);\n      } else {\n        activeTodoList.push(todo);\n      }\n    });\n\n    if (activeFilter === 'all') {\n      filteredTodoList = [...todoList];\n    }\n\n    if (activeFilter === 'active') {\n      filteredTodoList = [...activeTodoList];\n    }\n\n    if (activeFilter === 'completed') {\n      filteredTodoList = [...completedTodoList];\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <input\n            value={newTodo}\n            onChange={this.handleNewTodoChange}\n            onBlur={this.addNewTodo}\n            onKeyUp={this.handleNewTodoEnter}\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n          />\n        </header>\n        <TodoList\n          todoList={filteredTodoList}\n          handleCompleteToggle={this.handleCompleteToggle}\n          handleDeleteTodo={this.handleDeleteTodo}\n          setAll={this.setAll}\n          setNewTitle={this.setNewTitle}\n        />\n        {todoList.length > 0 && (\n          <TodosFilter\n            todoList={todoList}\n            filterTodoList={this.filterTodoList}\n            handleClearCompleted={this.handleClearCompleted}\n          />\n        )}\n      </section>\n    );\n  }\n}\n\nexport default TodoApp;\n","import React from 'react';\nimport TodoAdd from './components/TodoApp/TodoApp';\n\nfunction App() {\n  return (\n    <TodoAdd />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}